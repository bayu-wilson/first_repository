"""
If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9.
The sum of these multiples is 23.
Find the sum of all the multiples of 3 or 5 below 1000.

import numpy as np
# 1000./3 = 333 + 1/3 & 1000./5 = 200
array_1 = np.linspace(0,1000,334.33333333333333333333333333333333333333)
array_2 = np.linspace(0,1000,201)
sum_of_multiples = np.sum(array_1) + np.sum(array_2)
print sum_of_multiples
"""



a_1 = []							#empty array
for i in range(0,1000):
    if i%3. == 0: 				#percent sign finds remainder. Divisible when zero
        a_1.append(i)
    if i%5. == 0:
        a_1.append(i)
a_1 = sum(set(a_1))			#made into list,set(unique values),sum of unique values
print a_1


#np.unique


"""
Each new term in the Fibonacci sequence is generated by adding the previous two terms. 
By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed
four million, find the sum of the even-valued terms.
"""

#limit is 4e+6
#add last two to get result
#next index = next-1 + next -2
#0+1 =1, 1+1=2, 2+1=3, 3+2=5



import numpy as np
fib_list = [0,1,1]    #this is the beginning of fib sequence
even_fib = []
for i in range(3,50):
	x = fib_list[i-1]+fib_list[i-2]
	fib_list.append(x)
	
	#if x%2 == 0:
	if x%2 == 0 and x < 4e6:
		even_fib.append(x)
	elif x >= 4e6:				#elif. If it fails first condition then do this.
		break
	#if even_fib[len(even_fib)-1] > 4000000:  ###This finds last index not exceeding 4e6
	#	del even_fib[-1]
	#break						###This breaks loop
print sum(even_fib)								 ####THIS WORKS YEET
												
	
### Using While loops ###
		

"""
sum = 0 
fib_list_2 = [0,1]      				#initial sum
while fib_f < 4000000:		#a while loop loops until limit, similar. loops until false
	if fib_f % 2 == 0:
		sum = sum + fib_f
	fib_list_2 = fib_list[1]+fib_list
		
		
		
sum = 0
f1, f2 = 0, 1
while f2 < 4000000:
    if f2 % 2 == 0:
        sum += f2
    f1, f2 = f2, f1 + f2
print(sum)

"""

"""
The prime factors of 13195 are 5, 7, 13 and 29.

What is the largest prime factor of the number 600851475143 ?

So for the long route, we're going to have to find all the factors of this number and 
then narrow it down only to prime numbers. Prime numbers are only divisible by two
numbers, aka one pair.

1.) We could cycle through all factors of number and put into
array.

2.)From here we would use modular % to check remainder from 1 to the factor
and if there is only 1 and number, is is prime and we can put it into 
another array.
else, we don't care.

3.) With the new array we just find the largest component in this array
and this will be the maximum prime number.
"""

#How to find prime numbers from 0-30. 

c = []
n = 10000
for x in range(n-50, n):		#cycling through all numbers in range
	for y in range(2,x):	#cycling through possible factors
		if x % y == 0:		#if remainder is zero after cycle, it is prime
			break
	else:
		c.append(x),
print 'Okay done', c[-1]

